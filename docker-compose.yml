version: "3.9"
services:
  db:
    image: postgres:16
    environment:
      POSTGRES_DB: market_magic
      POSTGRES_USER: mm_user
      POSTGRES_PASSWORD: mm_password
    ports: ["5432:5432"]
    volumes:
      - ./sql-scripts:/docker-entrypoint-initdb.d:ro

  kafka:
    image: bitnami/kafka:3.7
    environment:
      KAFKA_ENABLE_KRAFT: "yes"
      KAFKA_CFG_PROCESS_ROLES: controller,broker
      KAFKA_CFG_NODE_ID: 1
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: "1@kafka:9093"
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      ALLOW_PLAINTEXT_LISTENER: "yes"
    ports: ["9092:9092"]

  mlflow:
    image: ghcr.io/mlflow/mlflow:v2.14.1
    command: mlflow server --backend-store-uri sqlite:///mlflow.db --host 0.0.0.0 --port 5000
    volumes:
      - ./artifacts:/artifacts
    ports: ["5000:5000"]

  ingestion:
    build: ./services/ingestion
    depends_on: [db, kafka]
    environment:
      DATABASE_URL: postgresql+psycopg://mm_user:mm_password@db:5432/market_magic
      KAFKA_BROKER: kafka:9092

  modeling:
    build: ./services/modeling
    depends_on: [db, mlflow]
    environment:
      DATABASE_URL: postgresql+psycopg://mm_user:mm_password@db:5432/market_magic
      MLFLOW_TRACKING_URI: http://mlflow:5000

  orchestrator:
    build: ./services/orchestration
    depends_on: [modeling, db]
    ports: ["8100:8100"]
    environment:
      MAX_SCENARIOS: 5

  serving:
    build: ./services/serving
    depends_on: [modeling]
    ports: ["8080:8080"]
    environment:
      MLFLOW_TRACKING_URI: http://mlflow:5000

  api:
    build: ./services/api
    depends_on: [serving, orchestrator, db]
    ports: ["8000:8000"]
    environment:
      ORCHESTRATION_URL: http://orchestrator:8100
      SERVING_URL: http://serving:8080
